name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: self-hosted
    # runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-15 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: self-hosted
    # runs-on: ubuntu-22.04
    
    if: github.repository_owner == 'vvzunin'

    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j $(nproc)

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure --no-tests=error -j $(nproc)

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: vvzunin/CircuitGen_Generator

  sanitize:
    needs: [lint]

    runs-on: self-hosted
    # runs-on: ubuntu-22.04

    env: { CXX: clang++-14 }

    steps:
    - uses: actions/checkout@v4

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j $(nproc)

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure --no-tests=error -j $(nproc)

  test:
    needs: [lint]

    strategy:
      matrix:
        os: [self-hosted] #[ubuntu-22.04]
        #os: [macos-12, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-15 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-15 150
        
    - name: Install static analyzers
      if: matrix.os == 'self-hosted'
      run: >-
        sudo apt-get install clang-tidy-15 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-15 150

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      # shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j $(nproc)

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j $(nproc)
      
  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: self-hosted
    # runs-on: ubuntu-22.04

    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'vvzunin'

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y
    
    - name: Install Graphviz
      run: sudo apt-get update -q && sudo apt-get install -y -q graphviz ghostscript

    - name: Build docs
      run: mkdir -p build/docs && cd build/docs && cmake "-DPROJECT_SOURCE_DIR=$PWD/../.." "-DPROJECT_BINARY_DIR=$PWD/.."
        -P ../../cmake/docs-ci.cmake


    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
